Changes from 0.2.1 to 0.2.2
---------------------------
* Added the block size option ("-b"), with a default block size of
  512 bytes.  You no longer need as much free RAM as the *break size*
  you've set - only as much free RAM as the block size you've set!


Changes from 0.2 to 0.2.1
-------------------------
* Replaced fmod() with good ole math -- fbreak can now be compiled as
  C code with gcc, instead of previously with g++.  I would've done it
  this way the first time, but I couldn't figure out how to get it to
  return a float (or long double as is the case now).
  
* Replaced the use of fat buffer to hold the entire file upon breaking.
  Now uses fseek() and fread() -- memory allocation for breaking a file
  is now limited only to the breaksize, instead of the breaksize plus
  the total file size as before.
  
* Added a sanity check to make sure that breaksize is smaller than the
  file size, and that breaksize and the file size are greater-than 0.
  
* Removed md5sum.c and md5 verification option (keep things simple).
  
* Some minor clean-ups, a change in some variable types, and a possible
  bug-fix if the breaksize specified was in bytes.


Changes from 0.1b to 0.2
------------------------
* Break size can now be set with the size parameter; previously it was
  hard-coded at around 1.4MiB.  You can specify 'B' (Bytes), 'K' (Kibibytes),
  'M' (Mebibytes), or 'G' (Gibibytes).

  The break size parameter is *not* required for rebuilding (in fact,
  it's not even used for rebuilding).
  
* The parts parameter to the "-r" rebuild option has been removed; it
  now uses a hard-coded max of 100 parts.  (I figured this would be a
  good amount.. hopefully you'll never use that many parts for distri-
  bution. :-)
  
* When rebuilding a file, you can specify either the first part or the
  original filename.
  
  ie:
    fbreak -r myfile.zip-part1
  or
    fbreak -r myfile.zip

